{"version":3,"sources":["web-build/register-service-worker.js","components/stopwatch.js","App.js"],"names":["navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","console","StopWatch","useState","text","leftButton","setLeftButton","rightButton","setRightButton","laps","setLaps","useFonts","Roboto_300Light","Roboto_500Medium","Montserrat_500Medium","Montserrat_400Regular","Montserrat_300Light","lapsHandler","time","maxLapsId","Math","max","map","currentLaps","id","finalId","length","prevLaps","toString","initialTime","lastUnit","timeToUpdate","direction","startImmediately","formatValue","value","start","stop","reset","getTimerState","getTime","View","style","styles","container","timer","Text","timerText","colorYellow","Minutes","colorGray","Seconds","timerTextMilli","Milliseconds","parseInt","buttons","TouchableOpacity","button","buttonBordered","onPress","timerState","leftButtonHandler","rightButtonHandler","FlatList","data","keyExtractor","item","renderItem","lap","lapText","lapTime","StyleSheet","create","flex","backgroundColor","flexDirection","alignItems","justifyContent","fontSize","fontFamily","letterSpacing","paddingVertical","paddingHorizontal","marginVertical","marginHorizontal","borderColor","borderWidth","borderRadius","margin","color","textAlign","alignSelf","App"],"mappings":"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","file":"static/js/app.8e1a3327.chunk.js","sourcesContent":["/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/clock-app/expo-service-worker.js', { scope: '/clock-app/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","import React, { useState } from 'react'\r\nimport { FlatList, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\r\nimport { useFonts, Roboto_300Light, Roboto_500Medium } from '@expo-google-fonts/roboto';\r\nimport { Montserrat_500Medium, Montserrat_400Regular, Montserrat_300Light } from '@expo-google-fonts/montserrat';\r\nimport Timer from 'react-compound-timer'\r\n\r\nexport default function StopWatch() {\r\n\r\n    const [leftButton, setLeftButton] = useState({ text: 'Start' })\r\n    const [rightButton, setRightButton] = useState({ text: 'Reset' })\r\n    const [laps, setLaps] = useState([])\r\n\r\n    const [loaded] = useFonts({\r\n        Roboto_300Light, Roboto_500Medium,\r\n        Montserrat_500Medium, Montserrat_400Regular, Montserrat_300Light\r\n    });\r\n    if (!loaded) {\r\n        return null; // TODO: App Loading\r\n    }\r\n\r\n    const leftButtonHandler = (timerState, start, stop) => {\r\n        switch (timerState) {\r\n            case 'INITED':\r\n            case 'STOPPED':\r\n                start()\r\n                setLeftButton({ text: 'Stop' })\r\n                setRightButton({ text: 'Lap' })\r\n                break;\r\n            case 'PLAYING':\r\n                stop()\r\n                setRightButton({ text: 'Reset' })\r\n                setLeftButton({ text: 'Resume' })\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    const rightButtonHandler = (timerState, time, reset) => {\r\n        switch (timerState) {\r\n            case 'INITED':\r\n            case 'STOPPED':\r\n                reset()\r\n                setLeftButton({ text: 'Start' })\r\n                setLaps([])\r\n                break;\r\n            case 'PLAYING':\r\n                lapsHandler(time)\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    const lapsHandler = (time) => {\r\n        const maxLapsId = Math.max(...laps.map(currentLaps => currentLaps.id));\r\n        const finalId = laps.length > 0 ? maxLapsId + 1 : 1;\r\n\r\n        setLaps((prevLaps) => {\r\n            return [\r\n                { id: (finalId).toString(), time: time },\r\n                ...prevLaps\r\n            ]\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Timer\r\n            initialTime={0}\r\n            lastUnit=\"m\"\r\n            timeToUpdate={1}\r\n            direction=\"forward\"\r\n            startImmediately={false}\r\n            formatValue={(value) => `${(value < 10 ? `0${value}` : value)}`}\r\n        >\r\n            {({ start, stop, reset, getTimerState, getTime }) => (\r\n                <View style={styles.container}>\r\n                    <View style={styles.timer}>\r\n                        <Text style={[styles.timerText, styles.colorYellow]}>\r\n                            {/* Minutes */}\r\n                            <Timer.Minutes />\r\n                            {/* Seconds */}\r\n                            <Text style={styles.colorGray}>.</Text><Timer.Seconds />\r\n                            {/* Milliseconds */}\r\n                            <Text style={[styles.colorGray, styles.timerTextMilli]}>.<Timer.Milliseconds formatValue={(value) => `${(parseInt(value / 10) < 10 ? `0${parseInt(value / 10)}` : parseInt(value / 10))}`} /></Text>\r\n                        </Text>\r\n                    </View>\r\n                    <View style={styles.buttons}>\r\n                        <TouchableOpacity\r\n                            style={[styles.button, styles.buttonBordered]}\r\n                            onPress={() => { leftButtonHandler(getTimerState(), start, stop) }}\r\n                        >\r\n                            <Text style={styles.colorYellow}>{leftButton.text}</Text>\r\n                        </TouchableOpacity>\r\n                        <TouchableOpacity\r\n                            style={styles.button}\r\n                            onPress={() => { rightButtonHandler(getTimerState(), getTime(), reset) }}\r\n                        >\r\n                            <Text style={styles.colorYellow}>{rightButton.text}{/*Next*/}</Text>\r\n                        </TouchableOpacity>\r\n                    </View>\r\n                    <View style={styles.laps}>\r\n                        <FlatList\r\n                            data={laps}\r\n                            keyExtractor={item => item.id}\r\n                            renderItem={({ item }) => (\r\n                                <View style={styles.lap}>\r\n                                    <Text style={styles.lapText}>Lap {item.id}</Text>\r\n                                    <Text style={[styles.lapText, styles.lapTime]}>\r\n                                        <Timer\r\n                                            formatValue={(value) => `${(value < 10 ? `0${value}` : value)}`}\r\n                                            initialTime={item.time}\r\n                                            lastUnit=\"m\"\r\n                                            startImmediately={false} >\r\n                                            <Timer.Minutes />.<Timer.Seconds />.<Timer.Milliseconds formatValue={(value) => `${(parseInt(value / 10) < 10 ? `0${parseInt(value / 10)}` : parseInt(value / 10))}`} />\r\n                                        </Timer>\r\n                                    </Text>\r\n\r\n                                </View>\r\n                            )}\r\n                        >\r\n                        </FlatList>\r\n                    </View>\r\n                </View>\r\n            )}\r\n        </Timer>\r\n\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: '#1a1f38',\r\n    },\r\n    timer: {\r\n        flex: 1,\r\n        flexDirection: 'row',\r\n        alignItems: 'flex-end',\r\n        justifyContent: 'center',\r\n    },\r\n    timerText: {\r\n        fontSize: 50,\r\n        fontFamily: 'Roboto_500Medium',\r\n        letterSpacing: 2,\r\n    },\r\n    timerTextMilli: {\r\n        fontSize: 40,\r\n        fontFamily: 'Roboto_300Light',\r\n        letterSpacing: 1\r\n    },\r\n    buttons: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n    },\r\n    button: {\r\n        paddingVertical: 15,\r\n        paddingHorizontal: 30,\r\n        marginVertical: 20,\r\n        marginHorizontal: 20,\r\n        fontFamily: 'Montserrat_400Regular',\r\n    },\r\n    buttonBordered: {\r\n        borderColor: '#ffe500',\r\n        borderWidth: 1,\r\n        borderRadius: 25\r\n    },\r\n    laps: {\r\n        flex: 1,\r\n        backgroundColor: '#2c314f',\r\n        margin: 20,\r\n        borderRadius: 25,\r\n    },\r\n    lap: {\r\n        flexDirection: 'row',\r\n        paddingVertical: 10,\r\n        paddingHorizontal: 20,\r\n    },\r\n    lapText: {\r\n        flex: 1,\r\n        color: 'white',\r\n        fontSize: 18,\r\n        fontFamily: 'Montserrat_500Medium',\r\n    },\r\n    lapTime: {\r\n        textAlign: 'right', alignSelf: 'stretch',\r\n        fontFamily: 'Roboto_500Medium',\r\n    },\r\n    colorYellow: {\r\n        color: '#ffe500',\r\n    },\r\n    colorGray: {\r\n        color: '#777777',\r\n    },\r\n});\r\n","import React from 'react';\r\nimport StopWatch from './components/stopwatch';\r\n\r\nexport default function App() {\r\n  return(\r\n    <StopWatch />\r\n  )\r\n}"],"sourceRoot":""}